#!/bin/env python
# coding: utf-8


import sys
import os
import ldap
import datetime
import inspect
import traceback
import time
import hashlib




##############################################################################
##############################################################################
##############################################################################
##############################################################################
##############################################################################
##############################################################################
class constants:

	# HOST => '192.168.40.128';
	HOST = '192.168.40.139';
	URL = 'ldap://192.168.40.139:389';
	PORT = 389;
	PRINCIPAL = 'cn=Manager,dc=example,dc=jp';
	# PASSWORD = 'root';
	PASSWORD = 'secret';











###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
class out:

	@staticmethod
	def println(*arguments):

		xwrite = sys.stdout.write
		for x in arguments:
			xwrite(str(x))
		xwrite("\n")












###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
class util:

	# "yyyy-mm-dd hh:mm:ss.xxxxxx"
	@staticmethod
	def timestamp():
		x = datetime.datetime.now();
		return x.isoformat(' ');

	@staticmethod
	def timelong_to_string(x):
		xx = datetime.datetime.fromtimestamp(x)
		return xx.isoformat(' ')

	# @staticmethod
	# def straighten(x):
	# 	return x.replace("\\", "\\\\").replace("\r", "\\r").replace("\n", "\\n")











###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
class stopwatch:

	_value = None

	def __init__(self):
		self._member = datetime.datetime.now()

	def __repr__(self):
		current = datetime.datetime.now()
		elapsed = current - self._member
		return str(elapsed)







###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
class logger:

	@staticmethod
	def error(*arguments):
		out.println(util.timestamp(), ' [error] ', *arguments)

	@staticmethod
	def info(*arguments):
		out.println(util.timestamp(), ' [info] ', *arguments)

	@staticmethod
	def debug(*arguments):

		if 0:
			frame_info = inspect.stack()
			frame_info = frame_info[1]
			frame_info = frame_info[0]
			frame_info = inspect.getframeinfo(frame_info)
			out.println(util.timestamp(), ' [debug] <', str(frame_info), '> ', *arguments)

		if 1:
			out.println(util.timestamp(), ' [debug] ', *arguments)
	
		if 0:
			# 呼び出しフレーム
			frame_object = inspect.stack()[1]
			# スタックトレース
			trace = traceback.extract_stack(frame_object[0])
			out.println(trace)
			out.println(inspect.getmodule(trace[1][2]))
			info = trace[1][2]
			# info = repr(info)
			out.println(util.timestamp(), ' [debug] <', info, '> ', *arguments)













###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
class test:

	@staticmethod
	def test(uid):

		try:
			session = ldap.initialize(constants.URL)
			# l.protocol_version = ldap.VERSION3
			# session.set_option(ldap.OPT_SIZELIMIT, 3) #効果無し
			items_affected = 0
			filter_string = '(uid={0})'.format(uid)
			# filter_string = '(uid:caseExactMatch:={0})'.format(uid)
			handle = session.search('ou=People,dc=example,dc=jp',
				ldap.SCOPE_SUBTREE, filter_string, [ 'uid' ])
			while 1:
				result_type, result_data = session.result(handle, 0)
				if (result_data == []):
					break
				elif result_type == ldap.RES_SEARCH_ENTRY:
					entry = result_data[0]
					dn, attributes = entry[0], entry[1]
					uid = attributes['uid'][0]
					logger.info('(detected entry): ', uid)
					pass
				else:
					logger.error('(detected unknown): ', str(result_data))
				items_affected = 1
			logger.info('検索 [', uid, '] ... ', items_affected)
		except ldap.LDAPError, e:
			logger.error(e)




###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
class samples:

	@staticmethod
	def create_samples():
		timestamp = util.timestamp()
		items = []
		for i in range(1000):
			uid = '{0}, {1}'.format(timestamp, i)
			uid = hashlib.md5(uid).hexdigest()
			items.append(uid)
		return items






###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
class main:

	@staticmethod
	def main():

		watch = stopwatch()
		logger.info('### start ###')

		uids = samples.create_samples()
		for uid in uids:
			test.test(uid)

		logger.info('Ok. 処理時間=[', watch, ']')
		logger.info('--- end ---')








###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################

main.main();

