#!/usr/bin/env python
# coding: utf-8


import sys
import os
import ldap3
import datetime
import inspect
import traceback
import time
import hashlib




##############################################################################
##############################################################################
##############################################################################
##############################################################################
##############################################################################
##############################################################################
class constants:

	HOST = '192.168.40.128';
	PORT = 389;
	PRINCIPAL = 'cn=Manager,dc=example,dc=jp';
	PASSWORD = 'root';




###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
class out:

	@staticmethod
	def println(*arguments):

		xwrite = sys.stdout.write
		for x in arguments:
			xwrite(str(x))
		xwrite("\n")










###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
class util:

	# "yyyy-mm-dd hh:mm:ss.xxxxxx"
	@staticmethod
	def timestamp():

		x = datetime.datetime.now();
		return x.isoformat(' ');

	@staticmethod
	def timelong_to_string(x):

		xx = datetime.datetime.fromtimestamp(x)
		return xx.isoformat(' ')

	# @staticmethod
	# def straighten(x):
	#
	# 	return x.replace("\\", "\\\\").replace("\r", "\\r").replace("\n", "\\n")











###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
class stopwatch:

	_value = None

	def __init__(self):

		self._member = datetime.datetime.now()

	def __repr__(self):

		current = datetime.datetime.now()
		elapsed = current - self._member
		return str(elapsed)







###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
class logger:

	@staticmethod
	def error(*arguments):

		out.println(util.timestamp(), ' [error] ', *arguments)

	@staticmethod
	def info(*arguments):

		out.println(util.timestamp(), ' [info] ', *arguments)

	@staticmethod
	def debug(*arguments):

		out.println(util.timestamp(), ' [debug] ', *arguments)








###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
class test:

	@staticmethod
	def test():

		server_info = ldap3.Server(
				constants.HOST,
				port = constants.PORT,
				get_info = ldap3.GET_ALL_INFO)

		session = ldap3.Connection(
				server_info,
				auto_bind = True,
				client_strategy = ldap3.STRATEGY_SYNC,
				user = constants.PRINCIPAL,
				password = constants.PASSWORD)

		handle = session.search(
				'ou=People,dc=example,dc=jp',
				'(objectClass=*)',
				ldap3.SEARCH_SCOPE_WHOLE_SUBTREE,
				attributes = [ 'uid' ])

		entries_affected = 0
		for entry in session.response:
			logger.info('detected: ', entry['dn'])
			entries_affected += 1

		session.unbind()

		logger.info(entries_affected, '件のエントリーを検出')




###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
class main:

	@staticmethod
	def main():

		watch = stopwatch()
		logger.info('### start ###')
		test.test()
		logger.info('Ok. 処理時間=[', watch, ']')
		logger.info('--- end ---')








###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################

main.main();

