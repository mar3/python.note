#!/usr/bin/env python
# coding: utf-8
#
#
# 試験中...
#
#

import sys
import os
import ldap
import datetime
import inspect
import traceback
import time





###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
class out:

	@staticmethod
	def println(*arguments):
		xwrite = sys.stdout.write
		for x in arguments:
			xwrite(str(x))
		xwrite("\n")

###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
class util:

	# "yyyy-mm-dd hh:mm:ss.xxxxxx"
	@staticmethod
	def timestamp():
		x = datetime.datetime.now();
		return x.isoformat(' ');

	@staticmethod
	def timelong_to_string(x):
		xx = datetime.datetime.fromtimestamp(x)
		return xx.isoformat(' ')

###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
class logger:

	@staticmethod
	def error(*arguments):
		out.println(util.timestamp(), ' [error] ', *arguments)

	@staticmethod
	def info(*arguments):
		out.println(util.timestamp(), ' [info] ', *arguments)

	@staticmethod
	def debug(*arguments):

		if 0:
			f = inspect.stack()
			f = f[2]
			f = f[0]
			f = inspect.getargvalues(f)
			# f = inspect.getframeinfo(f)
			# f = f.locals.get('self')
			out.println(util.timestamp(), ' [debug] <', str(f), '> ', *arguments)
			return
		if 0:
			out.println(util.timestamp(), ' [debug] ', *arguments)
			return
		if 0:
			# 呼び出しフレーム
			frame_object = inspect.stack()[1]
			# スタックトレース
			trace = traceback.extract_stack(frame_object[0])
			out.println(trace)
			out.println(inspect.getmodule(trace[1][2]))
			info = trace[1][2]
			# info = repr(info)
			out.println(util.timestamp(), ' [debug] <', info, '> ', *arguments)
			return
		if 1:
			f = inspect.currentframe()
			f = inspect.getframeinfo(f)
# print(f.module + '.' + f.function)
			print(repr(f))
	
###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
class c2:

	@staticmethod
	def execute():
		logger.debug('### start ###')
		logger.debug('--- end ---')

###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
class main:

	@staticmethod
	def sub():
		logger.debug('### start ###')
		c2.execute()
		logger.debug('--- end ---')

	@staticmethod
	def main():
		logger.debug('### start ###')
		main.sub()
		logger.debug('--- end ---')

main.main();

